name: Deploy to VPS

on:
  release:
    types: [published]

jobs:
  build:
    runs-on: ubuntu-latest
 
    steps:
    - uses: actions/checkout@v1 # may be actions/checkout@v2 now
    - name: Login to DockerHub Registry
      run: echo ${{ secrets.DOCKERHUB_PASSWORD }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin
    - name: Get the version
      id: vars
      run: echo ::set-output name=tag::$(echo ${GITHUB_REF:10})
    - name: Build the tagged Docker image
      run: docker build . --file Dockerfile --tag gleis21/chopsuey:${{steps.vars.outputs.tag}}
    - name: Push the tagged Docker image
      run: docker push gleis21/chopsuey:${{steps.vars.outputs.tag}}
    - name: Build the latest Docker image
      run: docker build . --file Dockerfile --tag gleis21/chopsuey:latest
    - name: Push the latest Docker image
      run: docker push gleis21/chopsuey:latest
    - name: Deploy to VPS
      uses: appleboy/ssh-action@master
      env:
          DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
          DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
          CS_USER: ${{ secrets.CS_USER }}
          CS_PASSWORD: ${{ secrets.CS_PASSWORD }}
          CS_BOOKING_EDIT_URL: ${{ secrets.CS_BOOKING_EDIT_URL }}
          AIRTABLE_API_KEY: ${{ secrets.AIRTABLE_API_KEY }}
          AIRTABLE_BASE_ID: ${{ secrets.AIRTABLE_BASE_ID }}
          SLACK_TOKEN: ${{ secrets.SLACK_TOKEN }}
          CADDYFILE: ${{secrets.CADDYFILE}}
          CS_DOMAIN: ${{CS_DOMAIN}}
      with:
        host: ${{ secrets.HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        envs: DOCKERHUB_USERNAME, DOCKERHUB_PASSWORD, CS_USER, CS_PASSWORD, CS_BOOKING_EDIT_URL, AIRTABLE_API_KEY, AIRTABLE_BASE_ID, SLACK_TOKEN, CADDYFILE, CS_DOMAIN
        script: |
          docker stop $(docker ps -a -q)
          docker rm $(docker ps -a -q)
          echo $DOCKERHUB_PASSWORD | docker login -u $DOCKERHUB_USERNAME --password-stdin
          docker pull gleis21/chopsuey:latest
          docker pull caddy:2-alpine
          docker network rm chopsuey-net
          docker network create --driver=bridge chopsuey-net
          echo "starting chopsuey container"
          docker run -dit --name chopsuey --network chopsuey-net -e CS_USER=$CS_USER -e CS_PASSWORD=$CS_PASSWORD -e CS_BOOKING_EDIT_URL=$CS_BOOKING_EDIT_URL -e AIRTABLE_API_KEY=$AIRTABLE_API_KEY -e AIRTABLE_BASE_ID=$AIRTABLE_BASE_ID -e SLACK_TOKEN=$SLACK_TOKEN gleis21/chopsuey:latest
          echo > Caddyfile && echo -e "$CS_DOMAIN {\n  reverse_proxy http://chopsuey:3000 {\n    header_up Host {http.reverse_proxy.upstream.host}\n  }\n}" >> Caddyfile
          echo "starting caddy container"
          docker run -dit -p 80:80 -p 443:443 --network chopsuey-net -v $PWD/Caddyfile:/etc/caddy/Caddyfile -v caddy_data:/data -v caddy_config:/config caddy:2-alpine
